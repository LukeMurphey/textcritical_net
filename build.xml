<project default="compile_and_package" name="textcritical.com">

    <!--
    Load the properties files, local is loaded first since properties are immutable (cannot be changed
    by later property files) and we want the local properties to override the default properties
    -->
    <property file="local.properties" />
    <property file="default.properties" />
	
	<!-- Set up JRuby so that SASS can run -->
	<path id="JRuby">
	    <fileset file="lib/jruby-complete-1.6.7.2.jar"/>
	</path> 
	
	<!-- This patternset matches the custom application Javascript -->
	<patternset id="application_js_files">
	    <include name="src/media/javascripts/app.js" />
	</patternset>
	
    <!-- ================================= 
          target: compile
         ================================= -->
	<target name="compile" description="Compile the application" depends="compile_scss,minify_js"></target>
	
    <!-- ================================= 
          target: initialize_libraries
         ================================= -->
	<target name="initialize_libraries">
		<taskdef resource="net/sf/antcontrib/antlib.xml">
		     <classpath>
		    	<pathelement location="lib/ant-contrib-0.6.jar"/>
		     </classpath>
		</taskdef>
	</target>
    
    <!-- ================================= 
          target: get_build_number
         ================================= -->
	<target name="get_build_number" depends="initialize_libraries">
		
		<macrodef name="get_build_info">
			<attribute name="path" default="${user.dir}" />
			<attribute name="format" default="ct" />
			<attribute name="outputproperty" />
			
			<sequential>
			    <exec failonerror="true" executable="git" outputproperty="@{outputproperty}"> <!-- Fail on error is set to true in order to prevent a bad build number from being included -->
					<arg value="log"/>
			    	<arg value="-1"/>
					<arg value="--pretty=format:%@{format}"/>
			    	<arg value="--abbrev-commit"/>
					<arg value="@{path}"/>
			    </exec>
			</sequential>
			
		</macrodef>
		
		<!-- Determine if this project is using Git and get the build info accordingly -->
		<if>
			<available file=".git" type="dir" />

			<!-- Run git to get the revision number and date -->
			<then>
				<get_build_info outputproperty="value.build.number" />
				<get_build_info format="cD" outputproperty="value.build.date" />
			</then>

			<!-- Generate the revision number and date -->
			<else>
				<echo message=".git directory does not exist; build date will be set to the current date" />

				<tstamp>
					<!--  1492116038 (Thu, 13 Apr 2017 15:40:38 -0500) -->
					<format property="value.build.date" pattern="E, d MMM YYYY HH:mm:ss Z" unit="hour" />
				</tstamp>

				<script language="javascript">
					<![CDATA[
						property = project.setProperty("value.build.number",Math.floor((new Date()).getTime()/1000));
					]]>
			    </script>
			</else>
		</if>

		<script language="javascript">
			<![CDATA[
				project.setProperty("value.build.number_hex", parseInt(project.getProperty("value.build.number"),10).toString(16));
			]]>
		</script>

		<echo>Revision number is: ${value.build.number} (${value.build.date}, ${value.build.number_hex})</echo>
	</target>

    <!-- ================================= 
          target: update_build_info
         ================================= -->
    <target name="update_build_info" depends="get_build_number">
        <propertyfile file="src/VERSION" comment="Build Information File">
            <entry key="build.number" value="${value.build.number}" />
            <entry key="build.date" type="date" value="now" pattern="dd.MM.yyyy HH:mm" />
            <entry key="build.version" value="${value.build.version}" />
        </propertyfile>
    </target>
	
    <!-- ================================= 
          target: package
         ================================= -->
    <target name="package" depends="get_build_number" description="Create the application package (sans media)">
    	<echo file="src/reader/templates/VERSION.txt" append="false">${value.build.version} (build ${value.build.number})</echo>
    	<mkdir dir="${value.build.packageoutput.directory}" />
        <zip destfile="${value.build.packageoutput.directory}/textcritical_${value.build.number_hex}.zip"
            basedir="src"
            excludes="reader/test/**, reader/tests.py, **/*.pyc, textcritical/settings.py, media/files/**"
            whenempty="create"
        />
    </target>

    <!-- ================================= 
          target: compile_and_package
         ================================= -->
    <target name="compile_and_package" depends="get_build_number,compile,package" description="Compile the application and create the package (sans media)"></target>

    <!-- ================================= 
          target: verify
         ================================= -->
	<target name="verify" description="Verify that the package appears to be valid"></target>
	
    <!-- ================================= 
          target: test
         ================================= -->
	<target name="test" description="Verify that the package appears to be valid">
		<mkdir dir="var/log"/>

		<exec executable="python" dir="src">
			<arg value="manage.py"/>
			<arg value="test"/>
		</exec>
	</target>

	<target name="deploy"></target>

    <!-- ================================= 
          target: initialize_database
         ================================= -->
	<target name="initialize_database" description="Initialize the database">

		<exec executable="python" dir="src">
			<arg value="manage.py"/>
			<arg value="makemigrations"/>
		</exec>

		<exec executable="python" dir="src">
			<arg value="manage.py"/>
			<arg value="migrate"/>
		</exec>
	</target>

    <!-- ================================= 
          target: index_works
         ================================= -->
	<target name="index_works" description="Create the search indexes for the works (deleting existing indexes)">
		<exec executable="python" dir="src">
			<arg value="manage.py"/>
			<arg value="make_search_indexes"/>
			<arg value="-c"/>
		</exec>
	</target>

    <!-- ================================= 
          target: create_ebooks_epub
         ================================= -->
	<target name="create_ebooks_epub" description="Create the epubs ebook files">
		<exec executable="python" dir="src">
			<arg value="manage.py"/>
			<arg value="make_epubs"/>
		</exec>
	</target>

    <!-- ================================= 
          target: create_ebooks_mobi
         ================================= -->
	<target name="create_ebooks_mobi" description="Create the mobi ebook files">
		<exec executable="python" dir="src">
			<arg value="manage.py"/>
			<arg value="make_mobi"/>
		</exec>
	</target>

    <!-- ================================= 
          target: create_ebooks
         ================================= -->
	<target name="create_ebooks" depends="create_ebooks_mobi,create_ebooks_epub" description="Create the ebook files (mobi and epub)"></target>

    <!-- ================================= 
          target: clear_ebooks
         ================================= -->
	<target name="clear_ebooks" description="Clear the ebooks">
		<delete dir="media/files"/>
	</target>

    <!-- ================================= 
          target: run_webserver
         ================================= -->
	<target name="run_webserver" description="Run the internal web-server">
		<exec executable="python" dir="src">
			<arg value="manage.py"/>
			<arg value="runserver"/>
			<arg value="0.0.0.0:8080"/>
		</exec>
	</target>

    <!-- ================================= 
          target: install_dependencies
         ================================= -->
	<target name="install_dependencies" description="Install dependencies">

		<exec executable="pip" dir="src">
			<arg value="install"/>
			<arg value="Django==1.8.18"/>
		</exec>

		<exec executable="pip" dir="src">
			<arg value="install"/>
			<arg value="django-grappelli==2.7.3"/>
		</exec>

		<exec executable="pip" dir="src">
			<arg value="install"/>
			<arg value="lxml"/>
		</exec>

		<exec executable="pip" dir="src">
			<arg value="install"/>
			<arg value="Genshi"/>
		</exec>
		<!--
		<exec executable="pip" dir="src">
			<arg value="install"/>
			<arg value="Wand"/>
		</exec>
		-->
	</target>

    <!-- ================================= 
          target: compile_scss
         ================================= -->
    <target name="compile_scss" description="Compile the SCSS files">
    	
        <echo message="Compiling scss files..." />
    	
        <property name="filesIn" value="src/media/stylesheets/[^_]*.scss" />
    	<property name="includes" value="lib/sass_includes" />
        <property name="fileOutDir" value="src/media/stylesheets" />
    	
        <script language="ruby" classpathref="JRuby">
            <![CDATA[
                require 'lib/sass-3.2.1/lib/sass'
                require 'sass/exec'
    
                files = Dir.glob($project.getProperty('filesIn'))
                #Dir.mkdir($project.getProperty('fileOutDir')) unless File.exists?($project.getProperty('fileOutDir'))
                files.each do 
                    | file |
                    puts "     [sass compiler] " + file + " -> " + $project.getProperty('fileOutDir') + "/" + File.basename(file, ".*") + ".css"
                    opts = Sass::Exec::Sass.new(["--load-path", $project.getProperty('includes'), "--load-path", File.dirname(file), file, File.join($project.getProperty('fileOutDir'), File.basename(file, ".*") + ".css")])
                    opts.parse
                end
            ]]>
        </script>
        <echo message="Done compiling scss files!" />
    </target>

    <!-- ================================= 
          target: Check JavaScript
         ================================= -->
	<target name="check_js" description="Checks the Javascript for potential problems">
		
		<!-- Load the JSLint library -->
		<taskdef name="jslint"
		           classname="com.googlecode.jslint4java.ant.JSLintTask"
		           classpath="lib/jslint4java-2.0.3.jar" />
		
		<!-- Check the Javascript files -->
		<jslint>
			<predef>jQuery,$$</predef>
		    <formatter type="plain" />
		    <fileset dir="." >
		    	<patternset refid="application_js_files" />
		    </fileset>
		</jslint>
		
	</target>
	
    <!-- ================================= 
          target: Minify JavaScript
         ================================= -->
	<target name="minify_js" description="Minifies the application JavaScript">
		
		<!-- The mapper to add "min" to the file name -->
		<mapper id="minified_js_mapper" type="glob" from="*.js" to="*.min.js" />

		<!-- Minify the files -->		
	    <apply executable="java" parallel="false">
	        <fileset dir="." includes="src/media/javascripts/app.js">
	        	<patternset refid="application_js_files" />
	        </fileset>
	        <arg line="-jar" />
	        <arg path="lib/yuicompressor-2.4.7.jar" />
	        <srcfile />
	        <arg line="-o"/>
	    	<mapper refid="minified_js_mapper" />
	        <targetfile />
	    </apply>
	</target>
	
</project>