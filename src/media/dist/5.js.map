{"version":3,"sources":["webpack:///./src/components/PopupDialog/index.jsx","webpack:///./src/components/Constants/index.js","webpack:///./src/components/WordInformation/WordLemma.css?af8a","webpack:///./src/components/WordInformation/WordLemma.css","webpack:///./src/components/PopupDialog/PopupDialog.scss?1847","webpack:///./src/components/PopupDialog/PopupDialog.scss","webpack:///./src/components/WordInformation/WordLemma.jsx","webpack:///./src/components/WordInformation/index.jsx","webpack:///./src/components/WordInformation/ExternalLookupLinks.jsx","webpack:///./src/components/WordInformation/WordInformationPopup.jsx","webpack:///./src/components/BetaCodeConverter/index.jsx"],"names":["getPositionRecommendation","event","clientX","window","innerWidth","clientY","innerHeight","PopupDialog","children","onClose","x","y","positionBelow","positionRight","footer","width","maxHeight","inverted","frameless","closeButtonStyle","float","cursor","marginRight","segmentStyle","position","overflowY","padding","zIndex","segmentStyleTinyTop","top","left","segmentStyleTinyBelow","bottom","getSegmentStyle","footerStyle","height","open","className","style","onClick","basic","propTypes","PropTypes","func","isRequired","number","bool","element","defaultProps","MODE_LOADING","MODE_ERROR","MODE_DONE","MODE_NOT_READY","api","content","__esModule","default","module","i","options","exports","locals","___CSS_LOADER_API_IMPORT___","push","WordLemma","props","lexiconEntries","length","Message","warning","Icon","name","map","lexiconEntry","key","lemma_lexical_form","dangerouslySetInnerHTML","__html","definition","arrayOf","shape","WordInformation","word","work","searchState","useState","loading","setLoading","wordInfo","setWordInfo","error","setError","activeIndex","setActiveIndex","useEffect","fetch","ENDPOINT_WORD_PARSE","then","res","json","data","e","toString","mode","ignoring_diacritics","Accordion","marginTop","fluid","entry","index","Fragment","form","description","Title","active","titleProps","handleClick","lemma","meaning","Content","lexicon_entries","state","to","pathname","SEARCH","search","PARAMS_SEARCH","getSearchLinks","ErrorMessage","title","message","Placeholder","Header","Line","Paragraph","string","object","ExternalLookupLinks","target","rel","href","PERSEUS_WORD_LOOKUP","LOGEION_WORD_LOOKUP","GOOGLE_SEARCH","WordInformationDialog","SegmentStyle","convertBetaCodeDebounced","AwesomeDebouncePromise","originalText","ENDPOINT_CONVERT_BETA_CODE_QUERY","BetaCodeConverter","history","setOriginalText","convertedText","setConvertedText","modal","setModal","selectedWord","setSelectedWord","popupX","setPopupX","popupY","setPopupY","popupPositionRight","setPopupPositionRight","popupPositionBelow","setPopupPositionBelow","handleWordClick","includes","textContent","right","below","pageX","pageY","addEventListener","removeEventListener","onClickBack","READ_WORK","backTitle","as","placeholder","value","onChange","txt","secondary","split","t","withRouter"],"mappings":"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","file":"5.bundle.js","sourcesContent":["import React from 'react';\nimport { Segment, Icon, Portal } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport './PopupDialog.scss';\n\n/**\n * Determines a recommendation about where to show a popup.\n *\n * @param {object} event The event from the handler with the dimensions\n */\nexport const getPositionRecommendation = (event) => {\n  const positionRight = event.clientX < (window.innerWidth / 2);\n  const positionBelow = event.clientY < (window.innerHeight / 2);\n\n  return [positionRight, positionBelow];\n};\n\nconst PopupDialog = ({ children, onClose, x, y, positionBelow, positionRight, footer, width, maxHeight, inverted, frameless}) => {\n\n  /**\n   * This is done to get rid of the outline around the close button and get it to show up at the\n   * right of the screen.\n   */\n  const closeButtonStyle = {\n    float: 'right',\n    cursor: 'pointer',\n    marginRight: 0,\n  };\n\n  // Correct for the cases where the dialog is off of the bottom of the screen.\n  const segmentStyle = {\n    position: 'absolute',\n    width,\n    maxHeight,\n    overflowY: 'auto',\n    padding: 0,\n    zIndex: 103,\n  };\n\n  const segmentStyleTinyTop = {\n    ...segmentStyle,\n    ...{\n      top: 45,\n      left: 5,\n      width: 'calc(100% - 10px)',\n      position: 'fixed',\n    },\n  };\n\n  const segmentStyleTinyBelow = {\n    ...segmentStyle,\n    ...{\n      bottom: 5,\n      left: 5,\n      width: 'calc(100% - 10px)',\n      position: 'fixed',\n    },\n  };\n\n  // Determine if we ought to enter the mode for mobile devices\n  const isSmallMode = () => window.innerWidth < 1024;\n\n  // Get the style appropriate for the segment to appear\n  const getSegmentStyle = () => {\n    if (isSmallMode()) {\n      if (positionBelow) {\n        return segmentStyleTinyBelow;\n      }\n      return segmentStyleTinyTop;\n    }\n\n    return segmentStyle;\n  };\n\n  // This applies to the footer\n  const footerStyle = {\n    position: 'sticky',\n    bottom: 0,\n    width: '100%',\n  };\n\n  // Get the main content for the popup\n  const getContent = () => (\n    <Segment className=\"popupDialog\" inverted={inverted} style={getSegmentStyle()}>\n      <div style={{ padding: frameless? 0 : 15 }}>\n        {!frameless && <Icon style={closeButtonStyle} onClick={onClose}>&#10005;</Icon>}\n        {children}\n      </div>\n      {footer && (\n        <Segment className=\"popupDialogFooter\" inverted={inverted} basic style={footerStyle}>{footer}</Segment>\n      )}\n    </Segment>\n  );\n\n  // Determine the height of the dialog\n  const height = segmentStyle.height ? segmentStyle.height : maxHeight;\n\n  // Calculate the vertical position\n  if (positionBelow) {\n    segmentStyle.top = y;\n  } else {\n    segmentStyle.top = y - height;\n  }\n\n  // Calculate the horizontal position\n  if (positionRight) {\n    segmentStyle.left = x;\n  } else {\n    segmentStyle.left = x - width;\n  }\n\n  // Use a portal so that the absolute positioning for the context menu works\n  return (\n    <Portal open>\n      {getContent()}\n    </Portal>\n  );\n};\n\nPopupDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n  positionBelow: PropTypes.bool,\n  positionRight: PropTypes.bool,\n  width: PropTypes.number,\n  maxHeight: PropTypes.number,\n  children: PropTypes.element.isRequired,\n  footer: PropTypes.element,\n  inverted: PropTypes.bool,\n  frameless: PropTypes.bool,\n};\n\nPopupDialog.defaultProps = {\n  positionBelow: true,\n  positionRight: true,\n  width: 500,\n  maxHeight: 300,\n  footer: null,\n  inverted: false,\n  frameless: false,\n};\n\nexport default PopupDialog;\n","\nexport const MODE_LOADING = 0;\nexport const MODE_ERROR = 1;\nexport const MODE_DONE = 2;\nexport const MODE_NOT_READY = 3;\n","var api = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!./WordLemma.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".view_lexicon .speaker {\\n  font-weight: bold;\\n  display: block;\\n  margin-top: 12px;\\n}\\n.view_lexicon .milestone {\\n  color: #999999;\\n}\\n.view_lexicon [data-rend=\\\"italics\\\"] {\\n  font-style: italic;\\n}\\n.view_lexicon .milestone[data-n].milestone[data-unit]:after {\\n  font-size: smaller;\\n  margin: 3px;\\n  content: \\\"[\\\" attr(data-unit) \\\" \\\" attr(data-n) \\\"]\\\";\\n}\\n.view_lexicon .milestone[data-unit=\\\"para\\\"] {\\n  display: block;\\n  padding-top: 12px;\\n}\\n.view_lexicon .l {\\n  display: block;\\n  margin-left: 24px;\\n}\\n.view_lexicon .gap {\\n  content: \\\"...\\\";\\n}\\n.view_lexicon .quote,\\n.view_lexicon .q {\\n  font-style: italic;\\n}\\n.view_lexicon .bibl {\\n  margin-left: 3px;\\n  margin-right: 3px;\\n  font-weight: bold;\\n}\\n.view_lexicon .bibl::before {\\n  content: \\\"[\\\";\\n}\\n.view_lexicon .bibl::after {\\n  content: \\\"]\\\";\\n}\\n.view_lexicon .docauthor {\\n  display: block;\\n  padding-bottom: 16px;\\n}\\n.view_lexicon .label:not(.block) .label {\\n  margin-left: 8px;\\n  margin-right: 4px;\\n}\\n.view_lexicon .note-tag {\\n  margin-left: 4px;\\n  margin-right: 2px;\\n  cursor: hand;\\n  cursor: pointer;\\n}\\n.view_lexicon .read-more {\\n  margin-top: 16px;\\n  display: block;\\n}\\n\\n.view_lexicon .lb {\\n  display: block;\\n}\\n\\n.view_lexicon .div3 {\\n  padding-top: 16px;\\n  display: block;\\n}\\n\\n.view_lexicon .quote > .title {\\n  font-weight: bold;\\n  display: block;\\n}\\n\\n.view_lexicon .p {\\n  margin-bottom: 16px;\\n  display: block;\\n}\\n\\n.view_lexicon .lemma {\\n  text-decoration: underline;\\n  font-weight: bold;\\n}\\n\\n.view_lexicon .orth {\\n  font-weight: bold;\\n  display: block;\\n}\\n\\n.view_lexicon .etym {\\n  display: block;\\n  margin-top: 12px;\\n  font-weight: bold;\\n}\\n\\n/**\\n * Style the sense entries so that they are nested accordingly\\n */\\n.view_lexicon .sense {\\n  display: block;\\n  margin-left: 15px;\\n  margin-top: 8px;\\n}\\n\\n/**\\n * Set the margins\\n */\\n.view_lexicon .sense[data-level=\\\"2\\\"] {\\n  margin-left: 30px;\\n}\\n\\n.view_lexicon .sense[data-level=\\\"3\\\"] {\\n  margin-left: 45px;\\n}\\n\\n.view_lexicon .sense[data-level=\\\"4\\\"] {\\n  margin-left: 60px;\\n}\\n\\n.view_lexicon .sense[data-level=\\\"5\\\"] {\\n  margin-left: 75px;\\n}\\n\\n.view_lexicon .sense[data-level=\\\"6\\\"] {\\n  margin-left: 90px;\\n}\\n\\n/**\\n * Show the N indicator (\\\"1.\\\", \\\"2.\\\", etc.)\\n */\\n.view_lexicon .sense[data-level]:before {\\n  content: \\\"\\\" attr(data-n) \\\". \\\";\\n}\\n\\n.view_lexicon .sense[data-level=\\\"0\\\"]:before {\\n  content: \\\"\\\";\\n}\\n\\n/* -----------------------------------------\\n     Read work\\n     ----------------------------------------- */\\n.verse.number {\\n  font-weight: bold;\\n  color: black;\\n  /*\\n  border: white solid 1px;\\n  padding: 1px 4px 1px 4px;\\n  background-color: white;\\n  */\\n}\\n\\n.verse-container {\\n  display: inline;\\n  line-height: 25px;\\n}\\n\\n.block {\\n  display: block;\\n  margin-top: 12px;\\n}\\n\\n.no_definition_entries {\\n  font-style: italic;\\n}\\n\\n.verse .word {\\n  cursor: pointer;\\n  cursor: hand;\\n}\\n.verse .word:hover {\\n  text-decoration: underline;\\n}\\n\\n.view_lexicon .tr {\\n  font-style: italic;\\n  font-weight: bold;\\n}\\n\\n@media print {\\n  .view_lexicon .note-tag {\\n    display: none;\\n  }\\n}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","var api = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./PopupDialog.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".ui.inverted.segment.popupDialog{background-color:#2b2b2e;border:1px solid #444;-webkit-box-shadow:0 15px 20px rgba(0,0,0,.5);box-shadow:0 15px 20px rgba(0,0,0,.5)}.popupDialog{z-index:100}.ui.inverted.segment.popupDialogFooter{border-top:1px solid #202023;background-color:#202023}.ui.segment.popupDialogFooter{border-top:1px solid #ddd;background-color:#f6f6f6}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Message, Icon } from 'semantic-ui-react';\nimport './WordLemma.css';\n\nconst WordLemma = (props) => {\n  const {\n    lexiconEntries, inverted,\n  } = props;\n\n  let className = '';\n\n  if (inverted) {\n    className = 'inverted';\n  }\n\n  return (\n    <>\n      {lexiconEntries.length === 0 && (\n        <Message warning className={className}>\n          <Icon name=\"warning\" />\n          No definition available from Liddel and Scott.\n        </Message>\n      )}\n      {lexiconEntries && (\n        lexiconEntries.map((lexiconEntry) => (\n          <div\n            key={lexiconEntry.lemma_lexical_form}\n            className=\"view_lexicon\"\n            // eslint-disable-next-line react/no-danger\n            dangerouslySetInnerHTML={{ __html: lexiconEntry.definition }}\n          />\n        ))\n      )}\n    </>\n  );\n};\n\nWordLemma.propTypes = {\n  lexiconEntries: PropTypes.arrayOf(PropTypes.shape),\n  inverted: PropTypes.bool,\n};\n\nWordLemma.defaultProps = {\n  lexiconEntries: null,\n  inverted: false,\n};\n\nexport default WordLemma;\n","import React, { useState, useEffect } from 'react';\nimport { Placeholder, Accordion, Icon } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { ENDPOINT_WORD_PARSE } from '../Endpoints/urls';\nimport { SEARCH } from '../URLs';\nimport { PARAMS_SEARCH } from '../URLs/Parameters';\nimport ErrorMessage from '../ErrorMessage';\nimport WordLemma from './WordLemma';\nimport { MODE_LOADING, MODE_ERROR, MODE_DONE } from \"../Constants\";\n\nconst WordInformation = ({ word, inverted, work, searchState }) => {\n  const [loading, setLoading] = useState(false);\n  const [wordInfo, setWordInfo] = useState(null);\n  const [error, setError] = useState(null);\n  const [activeIndex, setActiveIndex] = useState(null);\n\n  const getSearchLinks = (state = null) => {\n    if (work) {\n      return (\n        <>\n          Search for\n          {' '}\n          {word}\n          {' '}\n          in\n          {' '}\n          <Link to={{\n            pathname: SEARCH(),\n            search: PARAMS_SEARCH(`work:${work} ${word}`),\n            state,\n            }}\n          >\n            this work\n          </Link>\n          {' '}\n          or\n          {' '}\n          <Link to={SEARCH(word)}>all works</Link>\n        </>\n      );\n    }\n    return (\n      <>\n        Search for\n        {' '}\n        <Link to={SEARCH(word)}>{word}</Link>\n      </>\n    );\n  }\n\n\n  /**\n   * Get information for the given word.\n   *\n   * @param {string} wordToLookup The word to get information on\n   */\n   const getWordInfo = () => {\n    setLoading(true);\n\n    fetch(ENDPOINT_WORD_PARSE(word))\n      .then((res) => res.json())\n      .then((data) => {\n        setWordInfo(data);\n        setLoading(false);\n        setError(null);\n        setActiveIndex(null);\n      })\n      .catch((e) => {\n        setError(e.toString());\n        setLoading(false);\n      });\n  }\n\n  useEffect(() => {\n    getWordInfo();\n  }, [word]);\n\n  const handleClick = (e, titleProps) => {\n    const { index } = titleProps;\n    const newIndex = activeIndex === index ? -1 : index;\n\n    setActiveIndex(newIndex);\n  }\n\n  let mode = MODE_LOADING;\n  if (!loading && wordInfo) {\n    mode = MODE_DONE;\n  }\n  else if (!loading && error) {\n    mode = MODE_ERROR;\n  }\n\n  return (\n    <>\n      {mode === MODE_DONE && (\n        <div>\n          Found\n          {' '}\n          {wordInfo.length}\n          {' '}\n          {wordInfo.length !== 1 && (\n            <>parses for</>\n          )}\n          {wordInfo.length === 1 && (\n            <>parse for</>\n          )}\n          {' '}\n          {word}\n          .\n          {wordInfo && wordInfo.length > 0 && wordInfo[0].ignoring_diacritics && (\n            <>\n              {' '}\n              An exact match could not be found, so similar words with different diacritical marks\n              are being returned.\n            </>\n          )}\n          <Accordion inverted={inverted} style={{ marginTop: 18 }} fluid>\n            {wordInfo.map((entry, index) => (\n              <React.Fragment key={`${entry.form}::${entry.description}`}>\n                <Accordion.Title\n                  active={activeIndex === index}\n                  index={index}\n                  onClick={(e, titleProps) => handleClick(e, titleProps)}\n                >\n                  <Icon name=\"dropdown\" />\n                  {entry.lemma}\n                  {' '}\n                  (\n                  {entry.description}\n                  ):\n                  {' '}\n                  {entry.meaning}\n                </Accordion.Title>\n                <Accordion.Content\n                  active={activeIndex === index}\n                >\n                  <WordLemma\n                    lexiconEntries={entry.lexicon_entries}\n                    inverted={inverted}\n                  />\n                </Accordion.Content>\n              </React.Fragment>\n            ))}\n          </Accordion>\n          <div style={{ marginTop: 12 }}>\n            {getSearchLinks(word, work, searchState)}\n          </div>\n        </div>\n      )}\n      {mode === MODE_ERROR && (\n        <div>\n          <ErrorMessage\n            inverted={inverted}\n            title=\"Unable to get word information\"\n            description=\"Information for the given word could not be obtained.\"\n            message={error}\n          />\n        </div>\n      )}\n      {mode === MODE_LOADING && (\n        <Placeholder inverted={inverted} style={{ marginTop: 32 }}>\n          <Placeholder.Header>\n            <Placeholder.Line />\n          </Placeholder.Header>\n          <Placeholder.Paragraph>\n            <Placeholder.Line />\n          </Placeholder.Paragraph>\n        </Placeholder>\n      )}\n    </>\n  );\n}\n\nWordInformation.propTypes = {\n  word: PropTypes.string.isRequired,\n  work: PropTypes.string,\n  inverted: PropTypes.bool,\n  // eslint-disable-next-line react/forbid-prop-types\n  searchState: PropTypes.object,\n};\n\nWordInformation.defaultProps = {\n  inverted: false,\n  work: null,\n  searchState: null,\n};\n\nexport default WordInformation;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { GOOGLE_SEARCH, PERSEUS_WORD_LOOKUP, LOGEION_WORD_LOOKUP } from '../URLs';\n\nfunction ExternalLookupLinks({ word }) {\n  return (\n    <div>\n      Look up at\n      {' '}\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href={PERSEUS_WORD_LOOKUP(word)}>\n        Perseus\n      </a>\n      ,\n      {' '}\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href={LOGEION_WORD_LOOKUP(word)}>\n        Logeion\n      </a>\n      , or\n      {' '}\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href={GOOGLE_SEARCH(word)}>\n        Google\n      </a>\n    </div>\n  );\n}\n\nExternalLookupLinks.propTypes = {\n  word: PropTypes.string.isRequired,\n};\n\nexport default ExternalLookupLinks;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WordInformation from '.';\nimport PopupDialog from '../PopupDialog';\nimport ExternalLookupLinks from './ExternalLookupLinks';\n\nconst WordInformationDialog = (props) => {\n  const {\n    word, onClose, x, y, positionBelow, positionRight, inverted, work, searchState,\n  } = props;\n\n  return (\n    <PopupDialog\n      onClose={onClose}\n      inverted={inverted}\n      x={x}\n      y={y}\n      positionBelow={positionBelow}\n      positionRight={positionRight}\n      footer={<ExternalLookupLinks word={word} />}\n    >\n      <WordInformation work={work} word={word} inverted={inverted} searchState={searchState} />\n    </PopupDialog>\n  );\n};\n\nWordInformationDialog.propTypes = {\n  word: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n  positionBelow: PropTypes.bool,\n  positionRight: PropTypes.bool,\n  inverted: PropTypes.bool,\n  work: PropTypes.string,\n  // eslint-disable-next-line react/forbid-prop-types\n  searchState: PropTypes.object,\n};\n\nWordInformationDialog.defaultProps = {\n  positionBelow: true,\n  positionRight: true,\n  inverted: true,\n  work: null,\n  searchState: null,\n};\n\nexport default WordInformationDialog;\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types';\nimport { Container, Form, TextArea, Segment, Dimmer, Loader, Header } from 'semantic-ui-react';\nimport { withRouter } from \"react-router-dom\";\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport { ENDPOINT_CONVERT_BETA_CODE_QUERY } from '../Endpoints/urls';\nimport { READ_WORK } from '../URLs';\nimport FullscreenDialog from '../FullscreenDialog';\nimport WordInformation from \"../WordInformation/WordInformationPopup\";\nimport ErrorMessage from '../ErrorMessage';\nimport { getPositionRecommendation } from '../PopupDialog';\n\nconst SegmentStyle = {\n  marginTop: \"20px\",\n};\n\nconst convertBetaCodeDebounced = AwesomeDebouncePromise(\n  (originalText) =>\n  fetch(ENDPOINT_CONVERT_BETA_CODE_QUERY(originalText)),\n  500\n);\n\nconst BetaCodeConverter = ({ inverted, history }) => {\n  const [originalText, setOriginalText] = useState('');\n  const [convertedText, setConvertedText] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // The following are related to the popup\n  const [modal, setModal] = useState(null);\n  const [selectedWord, setSelectedWord] = useState(null);\n  const [popupX, setPopupX] = useState(null);\n  const [popupY, setPopupY] = useState(null);\n  const [popupPositionRight, setPopupPositionRight] = useState(null);\n  const [popupPositionBelow, setPopupPositionBelow] = useState(null);\n\n  const onClickBack = () => {\n    history.push(READ_WORK());\n  };\n\n  const closeModal = () => {\n    setModal(null)\n  };\n\n  const convertText = (text) => {\n    const testSplit = text.split(\" \");\n    return testSplit.map(t => (\n      <>\n        <span className=\"word\">{t}</span>\n        {' '}\n      </>\n    ));\n  }\n\n  const handleWordClick = event => {\n    // Determine if we are clicking a word, verse, note, or just empty space\n    if (event.target.className.includes('word')) {\n      const word = event.target.textContent;\n      const [right, below] = getPositionRecommendation(event);\n\n      setPopupPositionRight(right);\n      setPopupPositionBelow(below);\n      setPopupX(event.pageX);\n      setPopupY(event.pageY);\n      setModal('word');\n      setSelectedWord(word);\n    }\n  }\n\n  const getWordInfo = txt => {\n    setLoading(true);\n\n    convertBetaCodeDebounced(txt)\n      .then((res) => res.json())\n      .then((data) => {\n        setConvertedText(data);\n        setLoading(false);\n        setError(null);\n      })\n      .catch((e) => {\n        setError(e);\n        setLoading(false);\n      });\n  }\n\n  useEffect(() => {\n    window.addEventListener('click', handleWordClick);\n    return () => {\n      window.removeEventListener('click', handleWordClick);\n    };\n  }, [handleWordClick]);\n\n  /**\n   * Get the popups.\n   */\n  const getPopups = () => {\n    return (\n      <>\n        {modal === \"word\" && (\n          <WordInformation\n            inverted={inverted}\n            positionBelow={popupPositionBelow}\n            positionRight={popupPositionRight}\n            x={popupX}\n            y={popupY}\n            word={selectedWord}\n            onClose={() => closeModal()}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <FullscreenDialog inverted={inverted} onClickBack={onClickBack} backTitle=\"Back to the Library\">\n      {getPopups()}\n      <Container>\n        {error && (\n        <ErrorMessage\n          title=\"Unable to load word information\"\n          description=\"Unable to get information about the text from the server\"\n          message={error}\n        />\n        )}\n        <Segment inverted={inverted}>\n          <Header as=\"h1\">Greek text analysis</Header>\n          <Form>\n            Enter beta-code below and it will be converted to Greek Unicode automatically with the ability to look up individual words\n            <TextArea\n              placeholder='Enter Greek text or beta-code here'\n              value={originalText}\n              onChange={(event, data) => {\n                setOriginalText(data.value);\n                getWordInfo(data.value);\n            }}\n            />\n            <div style={SegmentStyle} />\n            {convertedText && (\n              <>\n                Results (click the word to do a morphological lookup):\n                <Segment secondary inverted={inverted}>\n                  { loading && (\n                  <Dimmer active>\n                    <Loader />\n                  </Dimmer>\n                  )}\n                  {convertText(convertedText)}\n                </Segment>\n              </>\n            )}\n          </Form>\n        </Segment>\n      </Container>\n    </FullscreenDialog>\n  );\n};\n\nBetaCodeConverter.propTypes = {\n  inverted: PropTypes.bool,\n  // eslint-disable-next-line react/forbid-prop-types\n  history: PropTypes.object.isRequired,\n};\n\nBetaCodeConverter.defaultProps = {\n  inverted: false,\n};\n\nexport default withRouter(BetaCodeConverter);\n"],"sourceRoot":""}